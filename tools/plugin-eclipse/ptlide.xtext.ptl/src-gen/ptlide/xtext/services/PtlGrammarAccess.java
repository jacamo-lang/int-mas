/*
* generated by Xtext
*/

package ptlide.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class PtlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Protocol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTK_PROTOCOLParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDescriptionParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Assignment cGoalsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGoalsGoalsParserRuleCall_4_0 = (RuleCall)cGoalsAssignment_4.eContents().get(0);
		private final Assignment cParticipantsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParticipantsParticipantsParserRuleCall_5_0 = (RuleCall)cParticipantsAssignment_5.eContents().get(0);
		private final Assignment cStatesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatesStatesParserRuleCall_6_0 = (RuleCall)cStatesAssignment_6.eContents().get(0);
		private final Assignment cTransitionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTransitionsTransitionsParserRuleCall_7_0 = (RuleCall)cTransitionsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Protocol:
		//	TK_PROTOCOL name=ID "{" description=Description goals=Goals participants=Participants states=States
		//	transitions=Transitions "}";
		public ParserRule getRule() { return rule; }

		//TK_PROTOCOL name=ID "{" description=Description goals=Goals participants=Participants states=States
		//transitions=Transitions "}"
		public Group getGroup() { return cGroup; }

		//TK_PROTOCOL
		public RuleCall getTK_PROTOCOLParserRuleCall_0() { return cTK_PROTOCOLParserRuleCall_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDParserRuleCall_1_0() { return cNameIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//description=Description
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_3_0() { return cDescriptionDescriptionParserRuleCall_3_0; }

		//goals=Goals
		public Assignment getGoalsAssignment_4() { return cGoalsAssignment_4; }

		//Goals
		public RuleCall getGoalsGoalsParserRuleCall_4_0() { return cGoalsGoalsParserRuleCall_4_0; }

		//participants=Participants
		public Assignment getParticipantsAssignment_5() { return cParticipantsAssignment_5; }

		//Participants
		public RuleCall getParticipantsParticipantsParserRuleCall_5_0() { return cParticipantsParticipantsParserRuleCall_5_0; }

		//states=States
		public Assignment getStatesAssignment_6() { return cStatesAssignment_6; }

		//States
		public RuleCall getStatesStatesParserRuleCall_6_0() { return cStatesStatesParserRuleCall_6_0; }

		//transitions=Transitions
		public Assignment getTransitionsAssignment_7() { return cTransitionsAssignment_7; }

		//Transitions
		public RuleCall getTransitionsTransitionsParserRuleCall_7_0() { return cTransitionsTransitionsParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class TransitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTK_TRANSITIONSParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTransitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTransitionsTransitionParserRuleCall_2_0 = (RuleCall)cTransitionsAssignment_2.eContents().get(0);
		
		//Transitions:
		//	name=TK_TRANSITIONS ":" transitions+=Transition+;
		public ParserRule getRule() { return rule; }

		//name=TK_TRANSITIONS ":" transitions+=Transition+
		public Group getGroup() { return cGroup; }

		//name=TK_TRANSITIONS
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//TK_TRANSITIONS
		public RuleCall getNameTK_TRANSITIONSParserRuleCall_0_0() { return cNameTK_TRANSITIONSParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//transitions+=Transition+
		public Assignment getTransitionsAssignment_2() { return cTransitionsAssignment_2; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_2_0() { return cTransitionsTransitionParserRuleCall_2_0; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceStateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSourceStateStateIdParserRuleCall_0_0 = (RuleCall)cSourceStateAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDestinationStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDestinationStateStateIdParserRuleCall_2_0 = (RuleCall)cDestinationStateAssignment_2.eContents().get(0);
		private final Keyword cNumberSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTransitionTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		
		//Transition:
		//	sourceState=StateId "-" destinationState=StateId "#" type=TransitionType;
		public ParserRule getRule() { return rule; }

		//sourceState=StateId "-" destinationState=StateId "#" type=TransitionType
		public Group getGroup() { return cGroup; }

		//sourceState=StateId
		public Assignment getSourceStateAssignment_0() { return cSourceStateAssignment_0; }

		//StateId
		public RuleCall getSourceStateStateIdParserRuleCall_0_0() { return cSourceStateStateIdParserRuleCall_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//destinationState=StateId
		public Assignment getDestinationStateAssignment_2() { return cDestinationStateAssignment_2; }

		//StateId
		public RuleCall getDestinationStateStateIdParserRuleCall_2_0() { return cDestinationStateStateIdParserRuleCall_2_0; }

		//"#"
		public Keyword getNumberSignKeyword_3() { return cNumberSignKeyword_3; }

		//type=TransitionType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//TransitionType
		public RuleCall getTypeTransitionTypeParserRuleCall_4_0() { return cTypeTransitionTypeParserRuleCall_4_0; }
	}

	public class TransitionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypeOccurrenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeTimeoutParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTypeImportParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//TransitionType:
		//	type=Occurrence | type=Timeout | type=Import;
		public ParserRule getRule() { return rule; }

		//type=Occurrence | type=Timeout | type=Import
		public Alternatives getAlternatives() { return cAlternatives; }

		//type=Occurrence
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Occurrence
		public RuleCall getTypeOccurrenceParserRuleCall_0_0() { return cTypeOccurrenceParserRuleCall_0_0; }

		//type=Timeout
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Timeout
		public RuleCall getTypeTimeoutParserRuleCall_1_0() { return cTypeTimeoutParserRuleCall_1_0; }

		//type=Import
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Import
		public RuleCall getTypeImportParserRuleCall_2_0() { return cTypeImportParserRuleCall_2_0; }
	}

	public class TimeoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Timeout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTK_TIMEOUTParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTimeoutAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimeoutINTEGERTerminalRuleCall_1_0 = (RuleCall)cTimeoutAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Timeout:
		//	name=TK_TIMEOUT timeout=INTEGER ";";
		public ParserRule getRule() { return rule; }

		//name=TK_TIMEOUT timeout=INTEGER ";"
		public Group getGroup() { return cGroup; }

		//name=TK_TIMEOUT
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//TK_TIMEOUT
		public RuleCall getNameTK_TIMEOUTParserRuleCall_0_0() { return cNameTK_TIMEOUTParserRuleCall_0_0; }

		//timeout=INTEGER
		public Assignment getTimeoutAssignment_1() { return cTimeoutAssignment_1; }

		//INTEGER
		public RuleCall getTimeoutINTEGERTerminalRuleCall_1_0() { return cTimeoutINTEGERTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTK_IMPORTParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cFileAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileSTRINGTerminalRuleCall_1_0 = (RuleCall)cFileAssignment_1.eContents().get(0);
		private final Assignment cMappingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMappingMappingParserRuleCall_2_0 = (RuleCall)cMappingAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Import:
		//	name=TK_IMPORT file=STRING mapping=Mapping? ";";
		public ParserRule getRule() { return rule; }

		//name=TK_IMPORT file=STRING mapping=Mapping? ";"
		public Group getGroup() { return cGroup; }

		//name=TK_IMPORT
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//TK_IMPORT
		public RuleCall getNameTK_IMPORTParserRuleCall_0_0() { return cNameTK_IMPORTParserRuleCall_0_0; }

		//file=STRING
		public Assignment getFileAssignment_1() { return cFileAssignment_1; }

		//STRING
		public RuleCall getFileSTRINGTerminalRuleCall_1_0() { return cFileSTRINGTerminalRuleCall_1_0; }

		//mapping=Mapping?
		public Assignment getMappingAssignment_2() { return cMappingAssignment_2; }

		//Mapping
		public RuleCall getMappingMappingParserRuleCall_2_0() { return cMappingMappingParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTK_MAPPINGParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMapsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMapsMapFromToParserRuleCall_2_0 = (RuleCall)cMapsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Mapping:
		//	name=TK_MAPPING "{" maps+=MapFromTo+ "}";
		public ParserRule getRule() { return rule; }

		//name=TK_MAPPING "{" maps+=MapFromTo+ "}"
		public Group getGroup() { return cGroup; }

		//name=TK_MAPPING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//TK_MAPPING
		public RuleCall getNameTK_MAPPINGParserRuleCall_0_0() { return cNameTK_MAPPINGParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//maps+=MapFromTo+
		public Assignment getMapsAssignment_2() { return cMapsAssignment_2; }

		//MapFromTo
		public RuleCall getMapsMapFromToParserRuleCall_2_0() { return cMapsMapFromToParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class MapFromToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapFromTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromParticipantIdParserRuleCall_0_0 = (RuleCall)cFromAssignment_0.eContents().get(0);
		private final Assignment cToAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cToParticipantIdParserRuleCall_1_0 = (RuleCall)cToAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MapFromTo:
		//	from=ParticipantId to=ParticipantId ";";
		public ParserRule getRule() { return rule; }

		//from=ParticipantId to=ParticipantId ";"
		public Group getGroup() { return cGroup; }

		//from=ParticipantId
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//ParticipantId
		public RuleCall getFromParticipantIdParserRuleCall_0_0() { return cFromParticipantIdParserRuleCall_0_0; }

		//to=ParticipantId
		public Assignment getToAssignment_1() { return cToAssignment_1; }

		//ParticipantId
		public RuleCall getToParticipantIdParserRuleCall_1_0() { return cToParticipantIdParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cPatternAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cPatternPatternParserRuleCall_1_0_0_0 = (RuleCall)cPatternAssignment_1_0_0.eContents().get(0);
		private final Assignment cContentAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cContentContentParserRuleCall_1_0_1_0 = (RuleCall)cContentAssignment_1_0_1.eContents().get(0);
		private final Assignment cContentAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cContentContentParserRuleCall_1_1_0 = (RuleCall)cContentAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Trigger:
		//	{Trigger} (pattern=Pattern content=Content? | content=Content) ";";
		public ParserRule getRule() { return rule; }

		//{Trigger} (pattern=Pattern content=Content? | content=Content) ";"
		public Group getGroup() { return cGroup; }

		//{Trigger}
		public Action getTriggerAction_0() { return cTriggerAction_0; }

		//pattern=Pattern content=Content? | content=Content
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//pattern=Pattern content=Content?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//pattern=Pattern
		public Assignment getPatternAssignment_1_0_0() { return cPatternAssignment_1_0_0; }

		//Pattern
		public RuleCall getPatternPatternParserRuleCall_1_0_0_0() { return cPatternPatternParserRuleCall_1_0_0_0; }

		//content=Content?
		public Assignment getContentAssignment_1_0_1() { return cContentAssignment_1_0_1; }

		//Content
		public RuleCall getContentContentParserRuleCall_1_0_1_0() { return cContentContentParserRuleCall_1_0_1_0; }

		//content=Content
		public Assignment getContentAssignment_1_1() { return cContentAssignment_1_1; }

		//Content
		public RuleCall getContentContentParserRuleCall_1_1_0() { return cContentContentParserRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTK_TRIGGERParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternSTRINGTerminalRuleCall_1_0 = (RuleCall)cPatternAssignment_1.eContents().get(0);
		
		//Pattern:
		//	name=TK_TRIGGER pattern=STRING;
		public ParserRule getRule() { return rule; }

		//name=TK_TRIGGER pattern=STRING
		public Group getGroup() { return cGroup; }

		//name=TK_TRIGGER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//TK_TRIGGER
		public RuleCall getNameTK_TRIGGERParserRuleCall_0_0() { return cNameTK_TRIGGERParserRuleCall_0_0; }

		//pattern=STRING
		public Assignment getPatternAssignment_1() { return cPatternAssignment_1; }

		//STRING
		public RuleCall getPatternSTRINGTerminalRuleCall_1_0() { return cPatternSTRINGTerminalRuleCall_1_0; }
	}

	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Content");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentSTRINGTerminalRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		
		//Content:
		//	":" content=STRING;
		public ParserRule getRule() { return rule; }

		//":" content=STRING
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//content=STRING
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }

		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_1_0() { return cContentSTRINGTerminalRuleCall_1_0; }
	}

	public class OccurrenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Occurrence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParticipantSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParticipantSourceParticipantOccurrenceParserRuleCall_0_0 = (RuleCall)cParticipantSourceAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDutyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDutyDutyParserRuleCall_2_0 = (RuleCall)cDutyAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParticipantDestinationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParticipantDestinationParticipantOccurrenceParserRuleCall_4_0 = (RuleCall)cParticipantDestinationAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cTriggerAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cTriggerTriggerParserRuleCall_5_0_0 = (RuleCall)cTriggerAssignment_5_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//Occurrence:
		//	participantSource=ParticipantOccurrence "--" duty=Duty "->" participantDestination=ParticipantOccurrence
		//	(trigger+=Trigger+ | ";");
		public ParserRule getRule() { return rule; }

		//participantSource=ParticipantOccurrence "--" duty=Duty "->" participantDestination=ParticipantOccurrence
		//(trigger+=Trigger+ | ";")
		public Group getGroup() { return cGroup; }

		//participantSource=ParticipantOccurrence
		public Assignment getParticipantSourceAssignment_0() { return cParticipantSourceAssignment_0; }

		//ParticipantOccurrence
		public RuleCall getParticipantSourceParticipantOccurrenceParserRuleCall_0_0() { return cParticipantSourceParticipantOccurrenceParserRuleCall_0_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }

		//duty=Duty
		public Assignment getDutyAssignment_2() { return cDutyAssignment_2; }

		//Duty
		public RuleCall getDutyDutyParserRuleCall_2_0() { return cDutyDutyParserRuleCall_2_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }

		//participantDestination=ParticipantOccurrence
		public Assignment getParticipantDestinationAssignment_4() { return cParticipantDestinationAssignment_4; }

		//ParticipantOccurrence
		public RuleCall getParticipantDestinationParticipantOccurrenceParserRuleCall_4_0() { return cParticipantDestinationParticipantOccurrenceParserRuleCall_4_0; }

		//trigger+=Trigger+ | ";"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//trigger+=Trigger+
		public Assignment getTriggerAssignment_5_0() { return cTriggerAssignment_5_0; }

		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_5_0_0() { return cTriggerTriggerParserRuleCall_5_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
	}

	public class DutyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Duty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDutytypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDutytypeDutyTypeParserRuleCall_0_0 = (RuleCall)cDutytypeAssignment_0.eContents().get(0);
		private final Assignment cDutyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDutySTRINGTerminalRuleCall_1_0 = (RuleCall)cDutyAssignment_1.eContents().get(0);
		
		//Duty:
		//	dutytype=DutyType duty=STRING;
		public ParserRule getRule() { return rule; }

		//dutytype=DutyType duty=STRING
		public Group getGroup() { return cGroup; }

		//dutytype=DutyType
		public Assignment getDutytypeAssignment_0() { return cDutytypeAssignment_0; }

		//DutyType
		public RuleCall getDutytypeDutyTypeParserRuleCall_0_0() { return cDutytypeDutyTypeParserRuleCall_0_0; }

		//duty=STRING
		public Assignment getDutyAssignment_1() { return cDutyAssignment_1; }

		//STRING
		public RuleCall getDutySTRINGTerminalRuleCall_1_0() { return cDutySTRINGTerminalRuleCall_1_0; }
	}

	public class DutyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DutyType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDutyTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNameTK_EVENTParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameTK_ACTIONParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cNameAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cNameTK_MESSAGEParserRuleCall_1_2_0_0 = (RuleCall)cNameAssignment_1_2_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cPerformativeAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cPerformativeIDParserRuleCall_1_2_2_0 = (RuleCall)cPerformativeAssignment_1_2_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		
		//DutyType:
		//	{DutyType} (name=TK_EVENT | name=TK_ACTION | name=TK_MESSAGE "[" performative=ID "]");
		public ParserRule getRule() { return rule; }

		//{DutyType} (name=TK_EVENT | name=TK_ACTION | name=TK_MESSAGE "[" performative=ID "]")
		public Group getGroup() { return cGroup; }

		//{DutyType}
		public Action getDutyTypeAction_0() { return cDutyTypeAction_0; }

		//name=TK_EVENT | name=TK_ACTION | name=TK_MESSAGE "[" performative=ID "]"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//name=TK_EVENT
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//TK_EVENT
		public RuleCall getNameTK_EVENTParserRuleCall_1_0_0() { return cNameTK_EVENTParserRuleCall_1_0_0; }

		//name=TK_ACTION
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//TK_ACTION
		public RuleCall getNameTK_ACTIONParserRuleCall_1_1_0() { return cNameTK_ACTIONParserRuleCall_1_1_0; }

		//name=TK_MESSAGE "[" performative=ID "]"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//name=TK_MESSAGE
		public Assignment getNameAssignment_1_2_0() { return cNameAssignment_1_2_0; }

		//TK_MESSAGE
		public RuleCall getNameTK_MESSAGEParserRuleCall_1_2_0_0() { return cNameTK_MESSAGEParserRuleCall_1_2_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_1() { return cLeftSquareBracketKeyword_1_2_1; }

		//performative=ID
		public Assignment getPerformativeAssignment_1_2_2() { return cPerformativeAssignment_1_2_2; }

		//ID
		public RuleCall getPerformativeIDParserRuleCall_1_2_2_0() { return cPerformativeIDParserRuleCall_1_2_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_3() { return cRightSquareBracketKeyword_1_2_3; }
	}

	public class ParticipantOccurrenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParticipantOccurrence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParticipantSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParticipantSourceParticipantIdParserRuleCall_0_0 = (RuleCall)cParticipantSourceAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCardinalityAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCardinalityINTEGERTerminalRuleCall_1_1_0 = (RuleCall)cCardinalityAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ParticipantOccurrence:
		//	participantSource=ParticipantId ("[" cardinality=INTEGER "]")?;
		public ParserRule getRule() { return rule; }

		//participantSource=ParticipantId ("[" cardinality=INTEGER "]")?
		public Group getGroup() { return cGroup; }

		//participantSource=ParticipantId
		public Assignment getParticipantSourceAssignment_0() { return cParticipantSourceAssignment_0; }

		//ParticipantId
		public RuleCall getParticipantSourceParticipantIdParserRuleCall_0_0() { return cParticipantSourceParticipantIdParserRuleCall_0_0; }

		//("[" cardinality=INTEGER "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//cardinality=INTEGER
		public Assignment getCardinalityAssignment_1_1() { return cCardinalityAssignment_1_1; }

		//INTEGER
		public RuleCall getCardinalityINTEGERTerminalRuleCall_1_1_0() { return cCardinalityINTEGERTerminalRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class StatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "States");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTK_STATESParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatesStateParserRuleCall_2_0 = (RuleCall)cStatesAssignment_2.eContents().get(0);
		
		//States:
		//	name=TK_STATES ":" states+=State+;
		public ParserRule getRule() { return rule; }

		//name=TK_STATES ":" states+=State+
		public Group getGroup() { return cGroup; }

		//name=TK_STATES
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//TK_STATES
		public RuleCall getNameTK_STATESParserRuleCall_0_0() { return cNameTK_STATESParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//states+=State+
		public Assignment getStatesAssignment_2() { return cStatesAssignment_2; }

		//State
		public RuleCall getStatesStateParserRuleCall_2_0() { return cStatesStateParserRuleCall_2_0; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdStateIdParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeStateTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//State:
		//	id=StateId type=StateType ";";
		public ParserRule getRule() { return rule; }

		//id=StateId type=StateType ";"
		public Group getGroup() { return cGroup; }

		//id=StateId
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//StateId
		public RuleCall getIdStateIdParserRuleCall_0_0() { return cIdStateIdParserRuleCall_0_0; }

		//type=StateType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//StateType
		public RuleCall getTypeStateTypeParserRuleCall_1_0() { return cTypeStateTypeParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class StateIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateId");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//StateId:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDParserRuleCall_0() { return cNameIDParserRuleCall_0; }
	}

	public class StateTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cInitialAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cInitialTK_INITIALParserRuleCall_1_0_0 = (RuleCall)cInitialAssignment_1_0.eContents().get(0);
		private final Assignment cFinalAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cFinalTK_FINALParserRuleCall_1_1_0 = (RuleCall)cFinalAssignment_1_1.eContents().get(0);
		
		//StateType:
		//	{StateType} (initial=TK_INITIAL | final=TK_FINAL)?;
		public ParserRule getRule() { return rule; }

		//{StateType} (initial=TK_INITIAL | final=TK_FINAL)?
		public Group getGroup() { return cGroup; }

		//{StateType}
		public Action getStateTypeAction_0() { return cStateTypeAction_0; }

		//(initial=TK_INITIAL | final=TK_FINAL)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//initial=TK_INITIAL
		public Assignment getInitialAssignment_1_0() { return cInitialAssignment_1_0; }

		//TK_INITIAL
		public RuleCall getInitialTK_INITIALParserRuleCall_1_0_0() { return cInitialTK_INITIALParserRuleCall_1_0_0; }

		//final=TK_FINAL
		public Assignment getFinalAssignment_1_1() { return cFinalAssignment_1_1; }

		//TK_FINAL
		public RuleCall getFinalTK_FINALParserRuleCall_1_1_0() { return cFinalTK_FINALParserRuleCall_1_1_0; }
	}

	public class ParticipantsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Participants");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTK_PARTICIPANTSParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParticipantsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParticipantsParticipantParserRuleCall_2_0 = (RuleCall)cParticipantsAssignment_2.eContents().get(0);
		
		//Participants:
		//	name=TK_PARTICIPANTS ":" participants+=Participant+;
		public ParserRule getRule() { return rule; }

		//name=TK_PARTICIPANTS ":" participants+=Participant+
		public Group getGroup() { return cGroup; }

		//name=TK_PARTICIPANTS
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//TK_PARTICIPANTS
		public RuleCall getNameTK_PARTICIPANTSParserRuleCall_0_0() { return cNameTK_PARTICIPANTSParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//participants+=Participant+
		public Assignment getParticipantsAssignment_2() { return cParticipantsAssignment_2; }

		//Participant
		public RuleCall getParticipantsParticipantParserRuleCall_2_0() { return cParticipantsParticipantParserRuleCall_2_0; }
	}

	public class ParticipantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Participant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameParticipantIdParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cParticipantDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParticipantDescriptionParticipantDescriptionParserRuleCall_1_0 = (RuleCall)cParticipantDescriptionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Participant:
		//	name=ParticipantId participantDescription=ParticipantDescription ";";
		public ParserRule getRule() { return rule; }

		//name=ParticipantId participantDescription=ParticipantDescription ";"
		public Group getGroup() { return cGroup; }

		//name=ParticipantId
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ParticipantId
		public RuleCall getNameParticipantIdParserRuleCall_0_0() { return cNameParticipantIdParserRuleCall_0_0; }

		//participantDescription=ParticipantDescription
		public Assignment getParticipantDescriptionAssignment_1() { return cParticipantDescriptionAssignment_1; }

		//ParticipantDescription
		public RuleCall getParticipantDescriptionParticipantDescriptionParserRuleCall_1_0() { return cParticipantDescriptionParticipantDescriptionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ParticipantIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParticipantId");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ParticipantId:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDParserRuleCall_0() { return cNameIDParserRuleCall_0; }
	}

	public class ParticipantDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParticipantDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cKindAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cKindTK_AGENTParserRuleCall_0_0_0_0 = (RuleCall)cKindAssignment_0_0_0.eContents().get(0);
		private final Assignment cRoleAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cRoleRoleParserRuleCall_0_0_1_0 = (RuleCall)cRoleAssignment_0_0_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cKindAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cKindTK_ARTIFACTParserRuleCall_0_1_0_0 = (RuleCall)cKindAssignment_0_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0_1_1_0 = (RuleCall)cTypeAssignment_0_1_1.eContents().get(0);
		private final Assignment cCardAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCardParticipantCardinalityParserRuleCall_1_0 = (RuleCall)cCardAssignment_1.eContents().get(0);
		
		//ParticipantDescription:
		//	(kind=TK_AGENT role=Role | kind=TK_ARTIFACT type=Type) card=ParticipantCardinality;
		public ParserRule getRule() { return rule; }

		//(kind=TK_AGENT role=Role | kind=TK_ARTIFACT type=Type) card=ParticipantCardinality
		public Group getGroup() { return cGroup; }

		//kind=TK_AGENT role=Role | kind=TK_ARTIFACT type=Type
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//kind=TK_AGENT role=Role
		public Group getGroup_0_0() { return cGroup_0_0; }

		//kind=TK_AGENT
		public Assignment getKindAssignment_0_0_0() { return cKindAssignment_0_0_0; }

		//TK_AGENT
		public RuleCall getKindTK_AGENTParserRuleCall_0_0_0_0() { return cKindTK_AGENTParserRuleCall_0_0_0_0; }

		//role=Role
		public Assignment getRoleAssignment_0_0_1() { return cRoleAssignment_0_0_1; }

		//Role
		public RuleCall getRoleRoleParserRuleCall_0_0_1_0() { return cRoleRoleParserRuleCall_0_0_1_0; }

		//kind=TK_ARTIFACT type=Type
		public Group getGroup_0_1() { return cGroup_0_1; }

		//kind=TK_ARTIFACT
		public Assignment getKindAssignment_0_1_0() { return cKindAssignment_0_1_0; }

		//TK_ARTIFACT
		public RuleCall getKindTK_ARTIFACTParserRuleCall_0_1_0_0() { return cKindTK_ARTIFACTParserRuleCall_0_1_0_0; }

		//type=Type
		public Assignment getTypeAssignment_0_1_1() { return cTypeAssignment_0_1_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_1_1_0() { return cTypeTypeParserRuleCall_0_1_1_0; }

		//card=ParticipantCardinality
		public Assignment getCardAssignment_1() { return cCardAssignment_1; }

		//ParticipantCardinality
		public RuleCall getCardParticipantCardinalityParserRuleCall_1_0() { return cCardParticipantCardinalityParserRuleCall_1_0; }
	}

	public class ParticipantCardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParticipantCardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cParticipantCardinalityAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cCardAllAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCardAllParticipantCardinalityAllParserRuleCall_0_1_0 = (RuleCall)cCardAllAssignment_0_1.eContents().get(0);
		private final Assignment cCardMinMaxAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCardMinMaxParticipantCardinalityMinMaxParserRuleCall_1_0 = (RuleCall)cCardMinMaxAssignment_1.eContents().get(0);
		
		//ParticipantCardinality:
		//	{ParticipantCardinality} cardAll=ParticipantCardinalityAll | cardMinMax=ParticipantCardinalityMinMax;
		public ParserRule getRule() { return rule; }

		//{ParticipantCardinality} cardAll=ParticipantCardinalityAll | cardMinMax=ParticipantCardinalityMinMax
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ParticipantCardinality} cardAll=ParticipantCardinalityAll
		public Group getGroup_0() { return cGroup_0; }

		//{ParticipantCardinality}
		public Action getParticipantCardinalityAction_0_0() { return cParticipantCardinalityAction_0_0; }

		//cardAll=ParticipantCardinalityAll
		public Assignment getCardAllAssignment_0_1() { return cCardAllAssignment_0_1; }

		//ParticipantCardinalityAll
		public RuleCall getCardAllParticipantCardinalityAllParserRuleCall_0_1_0() { return cCardAllParticipantCardinalityAllParserRuleCall_0_1_0; }

		//cardMinMax=ParticipantCardinalityMinMax
		public Assignment getCardMinMaxAssignment_1() { return cCardMinMaxAssignment_1; }

		//ParticipantCardinalityMinMax
		public RuleCall getCardMinMaxParticipantCardinalityMinMaxParserRuleCall_1_0() { return cCardMinMaxParticipantCardinalityMinMaxParserRuleCall_1_0; }
	}

	public class ParticipantCardinalityMinMaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParticipantCardinalityMinMax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParticipantCardinalityMinMaxAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMinAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinParticipantCardinalityMinParserRuleCall_1_0 = (RuleCall)cMinAssignment_1.eContents().get(0);
		private final Assignment cMaxAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMaxParticipantCardinalityMaxParserRuleCall_2_0 = (RuleCall)cMaxAssignment_2.eContents().get(0);
		
		//ParticipantCardinalityMinMax:
		//	{ParticipantCardinalityMinMax} min=ParticipantCardinalityMin? max=ParticipantCardinalityMax?;
		public ParserRule getRule() { return rule; }

		//{ParticipantCardinalityMinMax} min=ParticipantCardinalityMin? max=ParticipantCardinalityMax?
		public Group getGroup() { return cGroup; }

		//{ParticipantCardinalityMinMax}
		public Action getParticipantCardinalityMinMaxAction_0() { return cParticipantCardinalityMinMaxAction_0; }

		//min=ParticipantCardinalityMin?
		public Assignment getMinAssignment_1() { return cMinAssignment_1; }

		//ParticipantCardinalityMin
		public RuleCall getMinParticipantCardinalityMinParserRuleCall_1_0() { return cMinParticipantCardinalityMinParserRuleCall_1_0; }

		//max=ParticipantCardinalityMax?
		public Assignment getMaxAssignment_2() { return cMaxAssignment_2; }

		//ParticipantCardinalityMax
		public RuleCall getMaxParticipantCardinalityMaxParserRuleCall_2_0() { return cMaxParticipantCardinalityMaxParserRuleCall_2_0; }
	}

	public class ParticipantCardinalityMinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParticipantCardinalityMin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTK_MINParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cMinAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinINTEGERTerminalRuleCall_1_0 = (RuleCall)cMinAssignment_1.eContents().get(0);
		
		//ParticipantCardinalityMin:
		//	name=TK_MIN min=INTEGER;
		public ParserRule getRule() { return rule; }

		//name=TK_MIN min=INTEGER
		public Group getGroup() { return cGroup; }

		//name=TK_MIN
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//TK_MIN
		public RuleCall getNameTK_MINParserRuleCall_0_0() { return cNameTK_MINParserRuleCall_0_0; }

		//min=INTEGER
		public Assignment getMinAssignment_1() { return cMinAssignment_1; }

		//INTEGER
		public RuleCall getMinINTEGERTerminalRuleCall_1_0() { return cMinINTEGERTerminalRuleCall_1_0; }
	}

	public class ParticipantCardinalityMaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParticipantCardinalityMax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTK_MAXParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cMaxAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cMaxINTEGERTerminalRuleCall_1_0_0 = (RuleCall)cMaxAssignment_1_0.eContents().get(0);
		private final Assignment cMax2Assignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cMax2TK_PLUSParserRuleCall_1_1_0 = (RuleCall)cMax2Assignment_1_1.eContents().get(0);
		
		//ParticipantCardinalityMax:
		//	name=TK_MAX (max=INTEGER | max2=TK_PLUS);
		public ParserRule getRule() { return rule; }

		//name=TK_MAX (max=INTEGER | max2=TK_PLUS)
		public Group getGroup() { return cGroup; }

		//name=TK_MAX
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//TK_MAX
		public RuleCall getNameTK_MAXParserRuleCall_0_0() { return cNameTK_MAXParserRuleCall_0_0; }

		//max=INTEGER | max2=TK_PLUS
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//max=INTEGER
		public Assignment getMaxAssignment_1_0() { return cMaxAssignment_1_0; }

		//INTEGER
		public RuleCall getMaxINTEGERTerminalRuleCall_1_0_0() { return cMaxINTEGERTerminalRuleCall_1_0_0; }

		//max2=TK_PLUS
		public Assignment getMax2Assignment_1_1() { return cMax2Assignment_1_1; }

		//TK_PLUS
		public RuleCall getMax2TK_PLUSParserRuleCall_1_1_0() { return cMax2TK_PLUSParserRuleCall_1_1_0; }
	}

	public class ParticipantCardinalityAllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParticipantCardinalityAll");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameTK_ALLParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ParticipantCardinalityAll:
		//	name=TK_ALL;
		public ParserRule getRule() { return rule; }

		//name=TK_ALL
		public Assignment getNameAssignment() { return cNameAssignment; }

		//TK_ALL
		public RuleCall getNameTK_ALLParserRuleCall_0() { return cNameTK_ALLParserRuleCall_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeSTRINGTerminalRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//Type:
		//	type=STRING;
		public ParserRule getRule() { return rule; }

		//type=STRING
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_0() { return cTypeSTRINGTerminalRuleCall_0; }
	}

	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Role");
		private final Assignment cRoleAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRoleSTRINGTerminalRuleCall_0 = (RuleCall)cRoleAssignment.eContents().get(0);
		
		//Role:
		//	role=STRING;
		public ParserRule getRule() { return rule; }

		//role=STRING
		public Assignment getRoleAssignment() { return cRoleAssignment; }

		//STRING
		public RuleCall getRoleSTRINGTerminalRuleCall_0() { return cRoleSTRINGTerminalRuleCall_0; }
	}

	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Description");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDescriptionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameTK_DESCRIPTIONParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cDescriptionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cDescriptionAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Description:
		//	{Description} (name=TK_DESCRIPTION ":" description=STRING ";")?;
		public ParserRule getRule() { return rule; }

		//{Description} (name=TK_DESCRIPTION ":" description=STRING ";")?
		public Group getGroup() { return cGroup; }

		//{Description}
		public Action getDescriptionAction_0() { return cDescriptionAction_0; }

		//(name=TK_DESCRIPTION ":" description=STRING ";")?
		public Group getGroup_1() { return cGroup_1; }

		//name=TK_DESCRIPTION
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//TK_DESCRIPTION
		public RuleCall getNameTK_DESCRIPTIONParserRuleCall_1_0_0() { return cNameTK_DESCRIPTIONParserRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//description=STRING
		public Assignment getDescriptionAssignment_1_2() { return cDescriptionAssignment_1_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_2_0() { return cDescriptionSTRINGTerminalRuleCall_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }
	}

	public class GoalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameTK_GOALSParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGoalsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGoalsGoalParserRuleCall_2_0 = (RuleCall)cGoalsAssignment_2.eContents().get(0);
		
		//Goals:
		//	name=TK_GOALS ":" goals+=Goal+;
		public ParserRule getRule() { return rule; }

		//name=TK_GOALS ":" goals+=Goal+
		public Group getGroup() { return cGroup; }

		//name=TK_GOALS
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//TK_GOALS
		public RuleCall getNameTK_GOALSParserRuleCall_0_0() { return cNameTK_GOALSParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//goals+=Goal+
		public Assignment getGoalsAssignment_2() { return cGoalsAssignment_2; }

		//Goal
		public RuleCall getGoalsGoalParserRuleCall_2_0() { return cGoalsGoalParserRuleCall_2_0; }
	}

	public class GoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGoalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGoalSTRINGTerminalRuleCall_0_0 = (RuleCall)cGoalAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Goal:
		//	goal=STRING ";";
		public ParserRule getRule() { return rule; }

		//goal=STRING ";"
		public Group getGroup() { return cGroup; }

		//goal=STRING
		public Assignment getGoalAssignment_0() { return cGoalAssignment_0; }

		//STRING
		public RuleCall getGoalSTRINGTerminalRuleCall_0_0() { return cGoalSTRINGTerminalRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class TK_PROTOCOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_PROTOCOL");
		private final Keyword cProtocolKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TOKENS * / //ok
		//TK_PROTOCOL:
		//	"protocol";
		public ParserRule getRule() { return rule; }

		//"protocol"
		public Keyword getProtocolKeyword() { return cProtocolKeyword; }
	}

	public class TK_DESCRIPTIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_DESCRIPTION");
		private final Keyword cDescriptionKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_DESCRIPTION:
		//	"description";
		public ParserRule getRule() { return rule; }

		//"description"
		public Keyword getDescriptionKeyword() { return cDescriptionKeyword; }
	}

	public class TK_GOALSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_GOALS");
		private final Keyword cGoalsKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_GOALS:
		//	"goals";
		public ParserRule getRule() { return rule; }

		//"goals"
		public Keyword getGoalsKeyword() { return cGoalsKeyword; }
	}

	public class TK_PARTICIPANTSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_PARTICIPANTS");
		private final Keyword cParticipantsKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_PARTICIPANTS:
		//	"participants";
		public ParserRule getRule() { return rule; }

		//"participants"
		public Keyword getParticipantsKeyword() { return cParticipantsKeyword; }
	}

	public class TK_AGENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_AGENT");
		private final Keyword cAgentKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_AGENT:
		//	"agent";
		public ParserRule getRule() { return rule; }

		//"agent"
		public Keyword getAgentKeyword() { return cAgentKeyword; }
	}

	public class TK_ARTIFACTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_ARTIFACT");
		private final Keyword cArtifactKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_ARTIFACT:
		//	"artifact";
		public ParserRule getRule() { return rule; }

		//"artifact"
		public Keyword getArtifactKeyword() { return cArtifactKeyword; }
	}

	public class TK_MAXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_MAX");
		private final Keyword cMaxKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_MAX:
		//	"max";
		public ParserRule getRule() { return rule; }

		//"max"
		public Keyword getMaxKeyword() { return cMaxKeyword; }
	}

	public class TK_MINElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_MIN");
		private final Keyword cMinKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_MIN:
		//	"min";
		public ParserRule getRule() { return rule; }

		//"min"
		public Keyword getMinKeyword() { return cMinKeyword; }
	}

	public class TK_STATESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_STATES");
		private final Keyword cStatesKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_STATES:
		//	"states";
		public ParserRule getRule() { return rule; }

		//"states"
		public Keyword getStatesKeyword() { return cStatesKeyword; }
	}

	public class TK_INITIALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_INITIAL");
		private final Keyword cInitialKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_INITIAL:
		//	"initial";
		public ParserRule getRule() { return rule; }

		//"initial"
		public Keyword getInitialKeyword() { return cInitialKeyword; }
	}

	public class TK_FINALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_FINAL");
		private final Keyword cFinalKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_FINAL:
		//	"final";
		public ParserRule getRule() { return rule; }

		//"final"
		public Keyword getFinalKeyword() { return cFinalKeyword; }
	}

	public class TK_TRANSITIONSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_TRANSITIONS");
		private final Keyword cTransitionsKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_TRANSITIONS:
		//	"transitions";
		public ParserRule getRule() { return rule; }

		//"transitions"
		public Keyword getTransitionsKeyword() { return cTransitionsKeyword; }
	}

	public class TK_TIMEOUTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_TIMEOUT");
		private final Keyword cTimeoutKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_TIMEOUT:
		//	"timeout";
		public ParserRule getRule() { return rule; }

		//"timeout"
		public Keyword getTimeoutKeyword() { return cTimeoutKeyword; }
	}

	public class TK_MESSAGEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_MESSAGE");
		private final Keyword cMessageKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_MESSAGE:
		//	"message";
		public ParserRule getRule() { return rule; }

		//"message"
		public Keyword getMessageKeyword() { return cMessageKeyword; }
	}

	public class TK_ACTIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_ACTION");
		private final Keyword cActionKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_ACTION:
		//	"action";
		public ParserRule getRule() { return rule; }

		//"action"
		public Keyword getActionKeyword() { return cActionKeyword; }
	}

	public class TK_EVENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_EVENT");
		private final Keyword cEventKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_EVENT:
		//	"event";
		public ParserRule getRule() { return rule; }

		//"event"
		public Keyword getEventKeyword() { return cEventKeyword; }
	}

	public class TK_TRIGGERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_TRIGGER");
		private final Keyword cTriggerKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_TRIGGER:
		//	"trigger";
		public ParserRule getRule() { return rule; }

		//"trigger"
		public Keyword getTriggerKeyword() { return cTriggerKeyword; }
	}

	public class TK_IMPORTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_IMPORT");
		private final Keyword cImportKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_IMPORT:
		//	"import";
		public ParserRule getRule() { return rule; }

		//"import"
		public Keyword getImportKeyword() { return cImportKeyword; }
	}

	public class TK_MAPPINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_MAPPING");
		private final Keyword cMappingKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_MAPPING:
		//	"mapping";
		public ParserRule getRule() { return rule; }

		//"mapping"
		public Keyword getMappingKeyword() { return cMappingKeyword; }
	}

	public class TK_ALLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_ALL");
		private final Keyword cAllKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_ALL:
		//	"all";
		public ParserRule getRule() { return rule; }

		//"all"
		public Keyword getAllKeyword() { return cAllKeyword; }
	}

	public class TK_PLUSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_PLUS");
		private final Keyword cPlusSignKeyword = (Keyword)rule.eContents().get(1);
		
		////ok
		//TK_PLUS:
		//	"+";
		public ParserRule getRule() { return rule; }

		//"+"
		public Keyword getPlusSignKeyword() { return cPlusSignKeyword; }
	}

	public class IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		private final RuleCall cID_WITH_STARTING_LCLETTERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ID:
		//	ID_WITH_STARTING_LCLETTER;
		public ParserRule getRule() { return rule; }

		//ID_WITH_STARTING_LCLETTER
		public RuleCall getID_WITH_STARTING_LCLETTERTerminalRuleCall() { return cID_WITH_STARTING_LCLETTERTerminalRuleCall; }
	}
	
	
	private ProtocolElements pProtocol;
	private TransitionsElements pTransitions;
	private TransitionElements pTransition;
	private TransitionTypeElements pTransitionType;
	private TimeoutElements pTimeout;
	private ImportElements pImport;
	private MappingElements pMapping;
	private MapFromToElements pMapFromTo;
	private TriggerElements pTrigger;
	private PatternElements pPattern;
	private ContentElements pContent;
	private OccurrenceElements pOccurrence;
	private DutyElements pDuty;
	private DutyTypeElements pDutyType;
	private ParticipantOccurrenceElements pParticipantOccurrence;
	private StatesElements pStates;
	private StateElements pState;
	private StateIdElements pStateId;
	private StateTypeElements pStateType;
	private ParticipantsElements pParticipants;
	private ParticipantElements pParticipant;
	private ParticipantIdElements pParticipantId;
	private ParticipantDescriptionElements pParticipantDescription;
	private ParticipantCardinalityElements pParticipantCardinality;
	private ParticipantCardinalityMinMaxElements pParticipantCardinalityMinMax;
	private ParticipantCardinalityMinElements pParticipantCardinalityMin;
	private ParticipantCardinalityMaxElements pParticipantCardinalityMax;
	private ParticipantCardinalityAllElements pParticipantCardinalityAll;
	private TypeElements pType;
	private RoleElements pRole;
	private DescriptionElements pDescription;
	private GoalsElements pGoals;
	private GoalElements pGoal;
	private TK_PROTOCOLElements pTK_PROTOCOL;
	private TK_DESCRIPTIONElements pTK_DESCRIPTION;
	private TK_GOALSElements pTK_GOALS;
	private TK_PARTICIPANTSElements pTK_PARTICIPANTS;
	private TK_AGENTElements pTK_AGENT;
	private TK_ARTIFACTElements pTK_ARTIFACT;
	private TK_MAXElements pTK_MAX;
	private TK_MINElements pTK_MIN;
	private TK_STATESElements pTK_STATES;
	private TK_INITIALElements pTK_INITIAL;
	private TK_FINALElements pTK_FINAL;
	private TK_TRANSITIONSElements pTK_TRANSITIONS;
	private TK_TIMEOUTElements pTK_TIMEOUT;
	private TK_MESSAGEElements pTK_MESSAGE;
	private TK_ACTIONElements pTK_ACTION;
	private TK_EVENTElements pTK_EVENT;
	private TK_TRIGGERElements pTK_TRIGGER;
	private TK_IMPORTElements pTK_IMPORT;
	private TK_MAPPINGElements pTK_MAPPING;
	private TK_ALLElements pTK_ALL;
	private TK_PLUSElements pTK_PLUS;
	private IDElements pID;
	private TerminalRule tID_WITH_STARTING_LCLETTER;
	private TerminalRule tSTRING;
	private TerminalRule tINTEGER;
	private TerminalRule tINTEGER_NUMBER;
	private TerminalRule tWS;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;

	@Inject
	public PtlGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ptlide.xtext.Ptl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Protocol:
	//	TK_PROTOCOL name=ID "{" description=Description goals=Goals participants=Participants states=States
	//	transitions=Transitions "}";
	public ProtocolElements getProtocolAccess() {
		return (pProtocol != null) ? pProtocol : (pProtocol = new ProtocolElements());
	}
	
	public ParserRule getProtocolRule() {
		return getProtocolAccess().getRule();
	}

	//Transitions:
	//	name=TK_TRANSITIONS ":" transitions+=Transition+;
	public TransitionsElements getTransitionsAccess() {
		return (pTransitions != null) ? pTransitions : (pTransitions = new TransitionsElements());
	}
	
	public ParserRule getTransitionsRule() {
		return getTransitionsAccess().getRule();
	}

	//Transition:
	//	sourceState=StateId "-" destinationState=StateId "#" type=TransitionType;
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//TransitionType:
	//	type=Occurrence | type=Timeout | type=Import;
	public TransitionTypeElements getTransitionTypeAccess() {
		return (pTransitionType != null) ? pTransitionType : (pTransitionType = new TransitionTypeElements());
	}
	
	public ParserRule getTransitionTypeRule() {
		return getTransitionTypeAccess().getRule();
	}

	//Timeout:
	//	name=TK_TIMEOUT timeout=INTEGER ";";
	public TimeoutElements getTimeoutAccess() {
		return (pTimeout != null) ? pTimeout : (pTimeout = new TimeoutElements());
	}
	
	public ParserRule getTimeoutRule() {
		return getTimeoutAccess().getRule();
	}

	//Import:
	//	name=TK_IMPORT file=STRING mapping=Mapping? ";";
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Mapping:
	//	name=TK_MAPPING "{" maps+=MapFromTo+ "}";
	public MappingElements getMappingAccess() {
		return (pMapping != null) ? pMapping : (pMapping = new MappingElements());
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}

	//MapFromTo:
	//	from=ParticipantId to=ParticipantId ";";
	public MapFromToElements getMapFromToAccess() {
		return (pMapFromTo != null) ? pMapFromTo : (pMapFromTo = new MapFromToElements());
	}
	
	public ParserRule getMapFromToRule() {
		return getMapFromToAccess().getRule();
	}

	//Trigger:
	//	{Trigger} (pattern=Pattern content=Content? | content=Content) ";";
	public TriggerElements getTriggerAccess() {
		return (pTrigger != null) ? pTrigger : (pTrigger = new TriggerElements());
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}

	//Pattern:
	//	name=TK_TRIGGER pattern=STRING;
	public PatternElements getPatternAccess() {
		return (pPattern != null) ? pPattern : (pPattern = new PatternElements());
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}

	//Content:
	//	":" content=STRING;
	public ContentElements getContentAccess() {
		return (pContent != null) ? pContent : (pContent = new ContentElements());
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}

	//Occurrence:
	//	participantSource=ParticipantOccurrence "--" duty=Duty "->" participantDestination=ParticipantOccurrence
	//	(trigger+=Trigger+ | ";");
	public OccurrenceElements getOccurrenceAccess() {
		return (pOccurrence != null) ? pOccurrence : (pOccurrence = new OccurrenceElements());
	}
	
	public ParserRule getOccurrenceRule() {
		return getOccurrenceAccess().getRule();
	}

	//Duty:
	//	dutytype=DutyType duty=STRING;
	public DutyElements getDutyAccess() {
		return (pDuty != null) ? pDuty : (pDuty = new DutyElements());
	}
	
	public ParserRule getDutyRule() {
		return getDutyAccess().getRule();
	}

	//DutyType:
	//	{DutyType} (name=TK_EVENT | name=TK_ACTION | name=TK_MESSAGE "[" performative=ID "]");
	public DutyTypeElements getDutyTypeAccess() {
		return (pDutyType != null) ? pDutyType : (pDutyType = new DutyTypeElements());
	}
	
	public ParserRule getDutyTypeRule() {
		return getDutyTypeAccess().getRule();
	}

	//ParticipantOccurrence:
	//	participantSource=ParticipantId ("[" cardinality=INTEGER "]")?;
	public ParticipantOccurrenceElements getParticipantOccurrenceAccess() {
		return (pParticipantOccurrence != null) ? pParticipantOccurrence : (pParticipantOccurrence = new ParticipantOccurrenceElements());
	}
	
	public ParserRule getParticipantOccurrenceRule() {
		return getParticipantOccurrenceAccess().getRule();
	}

	//States:
	//	name=TK_STATES ":" states+=State+;
	public StatesElements getStatesAccess() {
		return (pStates != null) ? pStates : (pStates = new StatesElements());
	}
	
	public ParserRule getStatesRule() {
		return getStatesAccess().getRule();
	}

	//State:
	//	id=StateId type=StateType ";";
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//StateId:
	//	name=ID;
	public StateIdElements getStateIdAccess() {
		return (pStateId != null) ? pStateId : (pStateId = new StateIdElements());
	}
	
	public ParserRule getStateIdRule() {
		return getStateIdAccess().getRule();
	}

	//StateType:
	//	{StateType} (initial=TK_INITIAL | final=TK_FINAL)?;
	public StateTypeElements getStateTypeAccess() {
		return (pStateType != null) ? pStateType : (pStateType = new StateTypeElements());
	}
	
	public ParserRule getStateTypeRule() {
		return getStateTypeAccess().getRule();
	}

	//Participants:
	//	name=TK_PARTICIPANTS ":" participants+=Participant+;
	public ParticipantsElements getParticipantsAccess() {
		return (pParticipants != null) ? pParticipants : (pParticipants = new ParticipantsElements());
	}
	
	public ParserRule getParticipantsRule() {
		return getParticipantsAccess().getRule();
	}

	//Participant:
	//	name=ParticipantId participantDescription=ParticipantDescription ";";
	public ParticipantElements getParticipantAccess() {
		return (pParticipant != null) ? pParticipant : (pParticipant = new ParticipantElements());
	}
	
	public ParserRule getParticipantRule() {
		return getParticipantAccess().getRule();
	}

	//ParticipantId:
	//	name=ID;
	public ParticipantIdElements getParticipantIdAccess() {
		return (pParticipantId != null) ? pParticipantId : (pParticipantId = new ParticipantIdElements());
	}
	
	public ParserRule getParticipantIdRule() {
		return getParticipantIdAccess().getRule();
	}

	//ParticipantDescription:
	//	(kind=TK_AGENT role=Role | kind=TK_ARTIFACT type=Type) card=ParticipantCardinality;
	public ParticipantDescriptionElements getParticipantDescriptionAccess() {
		return (pParticipantDescription != null) ? pParticipantDescription : (pParticipantDescription = new ParticipantDescriptionElements());
	}
	
	public ParserRule getParticipantDescriptionRule() {
		return getParticipantDescriptionAccess().getRule();
	}

	//ParticipantCardinality:
	//	{ParticipantCardinality} cardAll=ParticipantCardinalityAll | cardMinMax=ParticipantCardinalityMinMax;
	public ParticipantCardinalityElements getParticipantCardinalityAccess() {
		return (pParticipantCardinality != null) ? pParticipantCardinality : (pParticipantCardinality = new ParticipantCardinalityElements());
	}
	
	public ParserRule getParticipantCardinalityRule() {
		return getParticipantCardinalityAccess().getRule();
	}

	//ParticipantCardinalityMinMax:
	//	{ParticipantCardinalityMinMax} min=ParticipantCardinalityMin? max=ParticipantCardinalityMax?;
	public ParticipantCardinalityMinMaxElements getParticipantCardinalityMinMaxAccess() {
		return (pParticipantCardinalityMinMax != null) ? pParticipantCardinalityMinMax : (pParticipantCardinalityMinMax = new ParticipantCardinalityMinMaxElements());
	}
	
	public ParserRule getParticipantCardinalityMinMaxRule() {
		return getParticipantCardinalityMinMaxAccess().getRule();
	}

	//ParticipantCardinalityMin:
	//	name=TK_MIN min=INTEGER;
	public ParticipantCardinalityMinElements getParticipantCardinalityMinAccess() {
		return (pParticipantCardinalityMin != null) ? pParticipantCardinalityMin : (pParticipantCardinalityMin = new ParticipantCardinalityMinElements());
	}
	
	public ParserRule getParticipantCardinalityMinRule() {
		return getParticipantCardinalityMinAccess().getRule();
	}

	//ParticipantCardinalityMax:
	//	name=TK_MAX (max=INTEGER | max2=TK_PLUS);
	public ParticipantCardinalityMaxElements getParticipantCardinalityMaxAccess() {
		return (pParticipantCardinalityMax != null) ? pParticipantCardinalityMax : (pParticipantCardinalityMax = new ParticipantCardinalityMaxElements());
	}
	
	public ParserRule getParticipantCardinalityMaxRule() {
		return getParticipantCardinalityMaxAccess().getRule();
	}

	//ParticipantCardinalityAll:
	//	name=TK_ALL;
	public ParticipantCardinalityAllElements getParticipantCardinalityAllAccess() {
		return (pParticipantCardinalityAll != null) ? pParticipantCardinalityAll : (pParticipantCardinalityAll = new ParticipantCardinalityAllElements());
	}
	
	public ParserRule getParticipantCardinalityAllRule() {
		return getParticipantCardinalityAllAccess().getRule();
	}

	//Type:
	//	type=STRING;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Role:
	//	role=STRING;
	public RoleElements getRoleAccess() {
		return (pRole != null) ? pRole : (pRole = new RoleElements());
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}

	//Description:
	//	{Description} (name=TK_DESCRIPTION ":" description=STRING ";")?;
	public DescriptionElements getDescriptionAccess() {
		return (pDescription != null) ? pDescription : (pDescription = new DescriptionElements());
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}

	//Goals:
	//	name=TK_GOALS ":" goals+=Goal+;
	public GoalsElements getGoalsAccess() {
		return (pGoals != null) ? pGoals : (pGoals = new GoalsElements());
	}
	
	public ParserRule getGoalsRule() {
		return getGoalsAccess().getRule();
	}

	//Goal:
	//	goal=STRING ";";
	public GoalElements getGoalAccess() {
		return (pGoal != null) ? pGoal : (pGoal = new GoalElements());
	}
	
	public ParserRule getGoalRule() {
		return getGoalAccess().getRule();
	}

	/// * TOKENS * / //ok
	//TK_PROTOCOL:
	//	"protocol";
	public TK_PROTOCOLElements getTK_PROTOCOLAccess() {
		return (pTK_PROTOCOL != null) ? pTK_PROTOCOL : (pTK_PROTOCOL = new TK_PROTOCOLElements());
	}
	
	public ParserRule getTK_PROTOCOLRule() {
		return getTK_PROTOCOLAccess().getRule();
	}

	////ok
	//TK_DESCRIPTION:
	//	"description";
	public TK_DESCRIPTIONElements getTK_DESCRIPTIONAccess() {
		return (pTK_DESCRIPTION != null) ? pTK_DESCRIPTION : (pTK_DESCRIPTION = new TK_DESCRIPTIONElements());
	}
	
	public ParserRule getTK_DESCRIPTIONRule() {
		return getTK_DESCRIPTIONAccess().getRule();
	}

	////ok
	//TK_GOALS:
	//	"goals";
	public TK_GOALSElements getTK_GOALSAccess() {
		return (pTK_GOALS != null) ? pTK_GOALS : (pTK_GOALS = new TK_GOALSElements());
	}
	
	public ParserRule getTK_GOALSRule() {
		return getTK_GOALSAccess().getRule();
	}

	////ok
	//TK_PARTICIPANTS:
	//	"participants";
	public TK_PARTICIPANTSElements getTK_PARTICIPANTSAccess() {
		return (pTK_PARTICIPANTS != null) ? pTK_PARTICIPANTS : (pTK_PARTICIPANTS = new TK_PARTICIPANTSElements());
	}
	
	public ParserRule getTK_PARTICIPANTSRule() {
		return getTK_PARTICIPANTSAccess().getRule();
	}

	////ok
	//TK_AGENT:
	//	"agent";
	public TK_AGENTElements getTK_AGENTAccess() {
		return (pTK_AGENT != null) ? pTK_AGENT : (pTK_AGENT = new TK_AGENTElements());
	}
	
	public ParserRule getTK_AGENTRule() {
		return getTK_AGENTAccess().getRule();
	}

	////ok
	//TK_ARTIFACT:
	//	"artifact";
	public TK_ARTIFACTElements getTK_ARTIFACTAccess() {
		return (pTK_ARTIFACT != null) ? pTK_ARTIFACT : (pTK_ARTIFACT = new TK_ARTIFACTElements());
	}
	
	public ParserRule getTK_ARTIFACTRule() {
		return getTK_ARTIFACTAccess().getRule();
	}

	////ok
	//TK_MAX:
	//	"max";
	public TK_MAXElements getTK_MAXAccess() {
		return (pTK_MAX != null) ? pTK_MAX : (pTK_MAX = new TK_MAXElements());
	}
	
	public ParserRule getTK_MAXRule() {
		return getTK_MAXAccess().getRule();
	}

	////ok
	//TK_MIN:
	//	"min";
	public TK_MINElements getTK_MINAccess() {
		return (pTK_MIN != null) ? pTK_MIN : (pTK_MIN = new TK_MINElements());
	}
	
	public ParserRule getTK_MINRule() {
		return getTK_MINAccess().getRule();
	}

	////ok
	//TK_STATES:
	//	"states";
	public TK_STATESElements getTK_STATESAccess() {
		return (pTK_STATES != null) ? pTK_STATES : (pTK_STATES = new TK_STATESElements());
	}
	
	public ParserRule getTK_STATESRule() {
		return getTK_STATESAccess().getRule();
	}

	////ok
	//TK_INITIAL:
	//	"initial";
	public TK_INITIALElements getTK_INITIALAccess() {
		return (pTK_INITIAL != null) ? pTK_INITIAL : (pTK_INITIAL = new TK_INITIALElements());
	}
	
	public ParserRule getTK_INITIALRule() {
		return getTK_INITIALAccess().getRule();
	}

	////ok
	//TK_FINAL:
	//	"final";
	public TK_FINALElements getTK_FINALAccess() {
		return (pTK_FINAL != null) ? pTK_FINAL : (pTK_FINAL = new TK_FINALElements());
	}
	
	public ParserRule getTK_FINALRule() {
		return getTK_FINALAccess().getRule();
	}

	////ok
	//TK_TRANSITIONS:
	//	"transitions";
	public TK_TRANSITIONSElements getTK_TRANSITIONSAccess() {
		return (pTK_TRANSITIONS != null) ? pTK_TRANSITIONS : (pTK_TRANSITIONS = new TK_TRANSITIONSElements());
	}
	
	public ParserRule getTK_TRANSITIONSRule() {
		return getTK_TRANSITIONSAccess().getRule();
	}

	////ok
	//TK_TIMEOUT:
	//	"timeout";
	public TK_TIMEOUTElements getTK_TIMEOUTAccess() {
		return (pTK_TIMEOUT != null) ? pTK_TIMEOUT : (pTK_TIMEOUT = new TK_TIMEOUTElements());
	}
	
	public ParserRule getTK_TIMEOUTRule() {
		return getTK_TIMEOUTAccess().getRule();
	}

	////ok
	//TK_MESSAGE:
	//	"message";
	public TK_MESSAGEElements getTK_MESSAGEAccess() {
		return (pTK_MESSAGE != null) ? pTK_MESSAGE : (pTK_MESSAGE = new TK_MESSAGEElements());
	}
	
	public ParserRule getTK_MESSAGERule() {
		return getTK_MESSAGEAccess().getRule();
	}

	////ok
	//TK_ACTION:
	//	"action";
	public TK_ACTIONElements getTK_ACTIONAccess() {
		return (pTK_ACTION != null) ? pTK_ACTION : (pTK_ACTION = new TK_ACTIONElements());
	}
	
	public ParserRule getTK_ACTIONRule() {
		return getTK_ACTIONAccess().getRule();
	}

	////ok
	//TK_EVENT:
	//	"event";
	public TK_EVENTElements getTK_EVENTAccess() {
		return (pTK_EVENT != null) ? pTK_EVENT : (pTK_EVENT = new TK_EVENTElements());
	}
	
	public ParserRule getTK_EVENTRule() {
		return getTK_EVENTAccess().getRule();
	}

	////ok
	//TK_TRIGGER:
	//	"trigger";
	public TK_TRIGGERElements getTK_TRIGGERAccess() {
		return (pTK_TRIGGER != null) ? pTK_TRIGGER : (pTK_TRIGGER = new TK_TRIGGERElements());
	}
	
	public ParserRule getTK_TRIGGERRule() {
		return getTK_TRIGGERAccess().getRule();
	}

	////ok
	//TK_IMPORT:
	//	"import";
	public TK_IMPORTElements getTK_IMPORTAccess() {
		return (pTK_IMPORT != null) ? pTK_IMPORT : (pTK_IMPORT = new TK_IMPORTElements());
	}
	
	public ParserRule getTK_IMPORTRule() {
		return getTK_IMPORTAccess().getRule();
	}

	////ok
	//TK_MAPPING:
	//	"mapping";
	public TK_MAPPINGElements getTK_MAPPINGAccess() {
		return (pTK_MAPPING != null) ? pTK_MAPPING : (pTK_MAPPING = new TK_MAPPINGElements());
	}
	
	public ParserRule getTK_MAPPINGRule() {
		return getTK_MAPPINGAccess().getRule();
	}

	////ok
	//TK_ALL:
	//	"all";
	public TK_ALLElements getTK_ALLAccess() {
		return (pTK_ALL != null) ? pTK_ALL : (pTK_ALL = new TK_ALLElements());
	}
	
	public ParserRule getTK_ALLRule() {
		return getTK_ALLAccess().getRule();
	}

	////ok
	//TK_PLUS:
	//	"+";
	public TK_PLUSElements getTK_PLUSAccess() {
		return (pTK_PLUS != null) ? pTK_PLUS : (pTK_PLUS = new TK_PLUSElements());
	}
	
	public ParserRule getTK_PLUSRule() {
		return getTK_PLUSAccess().getRule();
	}

	//ID:
	//	ID_WITH_STARTING_LCLETTER;
	public IDElements getIDAccess() {
		return (pID != null) ? pID : (pID = new IDElements());
	}
	
	public ParserRule getIDRule() {
		return getIDAccess().getRule();
	}

	//terminal ID_WITH_STARTING_LCLETTER:
	//	"^"? ("a".."z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getID_WITH_STARTING_LCLETTERRule() {
		return (tID_WITH_STARTING_LCLETTER != null) ? tID_WITH_STARTING_LCLETTER : (tID_WITH_STARTING_LCLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID_WITH_STARTING_LCLETTER"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal INTEGER returns ecore::EInt:
	//	INTEGER_NUMBER;
	public TerminalRule getINTEGERRule() {
		return (tINTEGER != null) ? tINTEGER : (tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER"));
	} 

	//terminal fragment INTEGER_NUMBER:
	//	"0" | "1".."9" "0".."9"*;
	public TerminalRule getINTEGER_NUMBERRule() {
		return (tINTEGER_NUMBER != null) ? tINTEGER_NUMBER : (tINTEGER_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER_NUMBER"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 
}
