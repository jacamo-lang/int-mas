/*
* generated by Xtext
*/
grammar InternalPtl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package ptlide.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ptlide.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ptlide.xtext.services.PtlGrammarAccess;

}

@parser::members {

 	private PtlGrammarAccess grammarAccess;
 	
    public InternalPtlParser(TokenStream input, PtlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Protocol";	
   	}
   	
   	@Override
   	protected PtlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProtocol
entryRuleProtocol returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProtocolRule()); }
	 iv_ruleProtocol=ruleProtocol 
	 { $current=$iv_ruleProtocol.current; } 
	 EOF 
;

// Rule Protocol
ruleProtocol returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getProtocolAccess().getTK_PROTOCOLParserRuleCall_0()); 
    }
ruleTK_PROTOCOL
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProtocolAccess().getNameIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProtocolRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProtocolAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProtocolAccess().getDescriptionDescriptionParserRuleCall_3_0()); 
	    }
		lv_description_3_0=ruleDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProtocolRule());
	        }
       		set(
       			$current, 
       			"description",
        		lv_description_3_0, 
        		"Description");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProtocolAccess().getGoalsGoalsParserRuleCall_4_0()); 
	    }
		lv_goals_4_0=ruleGoals		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProtocolRule());
	        }
       		set(
       			$current, 
       			"goals",
        		lv_goals_4_0, 
        		"Goals");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProtocolAccess().getParticipantsParticipantsParserRuleCall_5_0()); 
	    }
		lv_participants_5_0=ruleParticipants		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProtocolRule());
	        }
       		set(
       			$current, 
       			"participants",
        		lv_participants_5_0, 
        		"Participants");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProtocolAccess().getStatesStatesParserRuleCall_6_0()); 
	    }
		lv_states_6_0=ruleStates		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProtocolRule());
	        }
       		set(
       			$current, 
       			"states",
        		lv_states_6_0, 
        		"States");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProtocolAccess().getTransitionsTransitionsParserRuleCall_7_0()); 
	    }
		lv_transitions_7_0=ruleTransitions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProtocolRule());
	        }
       		set(
       			$current, 
       			"transitions",
        		lv_transitions_7_0, 
        		"Transitions");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getProtocolAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleTransitions
entryRuleTransitions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionsRule()); }
	 iv_ruleTransitions=ruleTransitions 
	 { $current=$iv_ruleTransitions.current; } 
	 EOF 
;

// Rule Transitions
ruleTransitions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionsAccess().getNameTK_TRANSITIONSParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleTK_TRANSITIONS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionsRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"TK_TRANSITIONS");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransitionsAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionsAccess().getTransitionsTransitionParserRuleCall_2_0()); 
	    }
		lv_transitions_2_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionsRule());
	        }
       		add(
       			$current, 
       			"transitions",
        		lv_transitions_2_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getSourceStateStateIdParserRuleCall_0_0()); 
	    }
		lv_sourceState_0_0=ruleStateId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"sourceState",
        		lv_sourceState_0_0, 
        		"StateId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransitionAccess().getHyphenMinusKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getDestinationStateStateIdParserRuleCall_2_0()); 
	    }
		lv_destinationState_2_0=ruleStateId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"destinationState",
        		lv_destinationState_2_0, 
        		"StateId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='#' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransitionAccess().getNumberSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getTypeTransitionTypeParserRuleCall_4_0()); 
	    }
		lv_type_4_0=ruleTransitionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"TransitionType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTransitionType
entryRuleTransitionType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionTypeRule()); }
	 iv_ruleTransitionType=ruleTransitionType 
	 { $current=$iv_ruleTransitionType.current; } 
	 EOF 
;

// Rule TransitionType
ruleTransitionType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionTypeAccess().getTypeOccurrenceParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleOccurrence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Occurrence");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionTypeAccess().getTypeTimeoutParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleTimeout		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Timeout");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionTypeAccess().getTypeImportParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTimeout
entryRuleTimeout returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeoutRule()); }
	 iv_ruleTimeout=ruleTimeout 
	 { $current=$iv_ruleTimeout.current; } 
	 EOF 
;

// Rule Timeout
ruleTimeout returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeoutAccess().getNameTK_TIMEOUTParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleTK_TIMEOUT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeoutRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"TK_TIMEOUT");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_timeout_1_0=RULE_INTEGER
		{
			newLeafNode(lv_timeout_1_0, grammarAccess.getTimeoutAccess().getTimeoutINTEGERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeoutRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"timeout",
        		lv_timeout_1_0, 
        		"INTEGER");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTimeoutAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getNameTK_IMPORTParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleTK_IMPORT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"TK_IMPORT");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_file_1_0=RULE_STRING
		{
			newLeafNode(lv_file_1_0, grammarAccess.getImportAccess().getFileSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"file",
        		lv_file_1_0, 
        		"STRING");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getMappingMappingParserRuleCall_2_0()); 
	    }
		lv_mapping_2_0=ruleMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"mapping",
        		lv_mapping_2_0, 
        		"Mapping");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getImportAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleMapping
entryRuleMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMappingRule()); }
	 iv_ruleMapping=ruleMapping 
	 { $current=$iv_ruleMapping.current; } 
	 EOF 
;

// Rule Mapping
ruleMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMappingAccess().getNameTK_MAPPINGParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleTK_MAPPING		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"TK_MAPPING");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMappingAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingAccess().getMapsMapFromToParserRuleCall_2_0()); 
	    }
		lv_maps_2_0=ruleMapFromTo		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingRule());
	        }
       		add(
       			$current, 
       			"maps",
        		lv_maps_2_0, 
        		"MapFromTo");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMappingAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleMapFromTo
entryRuleMapFromTo returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMapFromToRule()); }
	 iv_ruleMapFromTo=ruleMapFromTo 
	 { $current=$iv_ruleMapFromTo.current; } 
	 EOF 
;

// Rule MapFromTo
ruleMapFromTo returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMapFromToAccess().getFromParticipantIdParserRuleCall_0_0()); 
	    }
		lv_from_0_0=ruleParticipantId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapFromToRule());
	        }
       		set(
       			$current, 
       			"from",
        		lv_from_0_0, 
        		"ParticipantId");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMapFromToAccess().getToParticipantIdParserRuleCall_1_0()); 
	    }
		lv_to_1_0=ruleParticipantId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapFromToRule());
	        }
       		set(
       			$current, 
       			"to",
        		lv_to_1_0, 
        		"ParticipantId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMapFromToAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleTrigger
entryRuleTrigger returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTriggerRule()); }
	 iv_ruleTrigger=ruleTrigger 
	 { $current=$iv_ruleTrigger.current; } 
	 EOF 
;

// Rule Trigger
ruleTrigger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTriggerAccess().getTriggerAction_0(),
            $current);
    }
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerAccess().getPatternPatternParserRuleCall_1_0_0_0()); 
	    }
		lv_pattern_1_0=rulePattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerRule());
	        }
       		set(
       			$current, 
       			"pattern",
        		lv_pattern_1_0, 
        		"Pattern");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerAccess().getContentContentParserRuleCall_1_0_1_0()); 
	    }
		lv_content_2_0=ruleContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerRule());
	        }
       		set(
       			$current, 
       			"content",
        		lv_content_2_0, 
        		"Content");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerAccess().getContentContentParserRuleCall_1_1_0()); 
	    }
		lv_content_3_0=ruleContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerRule());
	        }
       		set(
       			$current, 
       			"content",
        		lv_content_3_0, 
        		"Content");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTriggerAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRulePattern
entryRulePattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPatternRule()); }
	 iv_rulePattern=rulePattern 
	 { $current=$iv_rulePattern.current; } 
	 EOF 
;

// Rule Pattern
rulePattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPatternAccess().getNameTK_TRIGGERParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleTK_TRIGGER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPatternRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"TK_TRIGGER");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_pattern_1_0=RULE_STRING
		{
			newLeafNode(lv_pattern_1_0, grammarAccess.getPatternAccess().getPatternSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPatternRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"pattern",
        		lv_pattern_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleContent
entryRuleContent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContentRule()); }
	 iv_ruleContent=ruleContent 
	 { $current=$iv_ruleContent.current; } 
	 EOF 
;

// Rule Content
ruleContent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0=':' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getContentAccess().getColonKeyword_0());
    }
(
(
		lv_content_1_0=RULE_STRING
		{
			newLeafNode(lv_content_1_0, grammarAccess.getContentAccess().getContentSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"content",
        		lv_content_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleOccurrence
entryRuleOccurrence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOccurrenceRule()); }
	 iv_ruleOccurrence=ruleOccurrence 
	 { $current=$iv_ruleOccurrence.current; } 
	 EOF 
;

// Rule Occurrence
ruleOccurrence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOccurrenceAccess().getParticipantSourceParticipantOccurrenceParserRuleCall_0_0()); 
	    }
		lv_participantSource_0_0=ruleParticipantOccurrence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOccurrenceRule());
	        }
       		set(
       			$current, 
       			"participantSource",
        		lv_participantSource_0_0, 
        		"ParticipantOccurrence");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='--' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOccurrenceAccess().getHyphenMinusHyphenMinusKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOccurrenceAccess().getDutyDutyParserRuleCall_2_0()); 
	    }
		lv_duty_2_0=ruleDuty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOccurrenceRule());
	        }
       		set(
       			$current, 
       			"duty",
        		lv_duty_2_0, 
        		"Duty");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOccurrenceAccess().getHyphenMinusGreaterThanSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOccurrenceAccess().getParticipantDestinationParticipantOccurrenceParserRuleCall_4_0()); 
	    }
		lv_participantDestination_4_0=ruleParticipantOccurrence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOccurrenceRule());
	        }
       		set(
       			$current, 
       			"participantDestination",
        		lv_participantDestination_4_0, 
        		"ParticipantOccurrence");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getOccurrenceAccess().getTriggerTriggerParserRuleCall_5_0_0()); 
	    }
		lv_trigger_5_0=ruleTrigger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOccurrenceRule());
	        }
       		add(
       			$current, 
       			"trigger",
        		lv_trigger_5_0, 
        		"Trigger");
	        afterParserOrEnumRuleCall();
	    }

)
)+
    |	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOccurrenceAccess().getSemicolonKeyword_5_1());
    }
))
;





// Entry rule entryRuleDuty
entryRuleDuty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDutyRule()); }
	 iv_ruleDuty=ruleDuty 
	 { $current=$iv_ruleDuty.current; } 
	 EOF 
;

// Rule Duty
ruleDuty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDutyAccess().getDutytypeDutyTypeParserRuleCall_0_0()); 
	    }
		lv_dutytype_0_0=ruleDutyType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDutyRule());
	        }
       		set(
       			$current, 
       			"dutytype",
        		lv_dutytype_0_0, 
        		"DutyType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_duty_1_0=RULE_STRING
		{
			newLeafNode(lv_duty_1_0, grammarAccess.getDutyAccess().getDutySTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDutyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"duty",
        		lv_duty_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleDutyType
entryRuleDutyType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDutyTypeRule()); }
	 iv_ruleDutyType=ruleDutyType 
	 { $current=$iv_ruleDutyType.current; } 
	 EOF 
;

// Rule DutyType
ruleDutyType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDutyTypeAccess().getDutyTypeAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getDutyTypeAccess().getNameTK_EVENTParserRuleCall_1_0_0()); 
	    }
		lv_name_1_0=ruleTK_EVENT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDutyTypeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"TK_EVENT");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDutyTypeAccess().getNameTK_ACTIONParserRuleCall_1_1_0()); 
	    }
		lv_name_2_0=ruleTK_ACTION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDutyTypeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"TK_ACTION");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getDutyTypeAccess().getNameTK_MESSAGEParserRuleCall_1_2_0_0()); 
	    }
		lv_name_3_0=ruleTK_MESSAGE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDutyTypeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"TK_MESSAGE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='[' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDutyTypeAccess().getLeftSquareBracketKeyword_1_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDutyTypeAccess().getPerformativeIDParserRuleCall_1_2_2_0()); 
	    }
		lv_performative_5_0=ruleID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDutyTypeRule());
	        }
       		set(
       			$current, 
       			"performative",
        		lv_performative_5_0, 
        		"ID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDutyTypeAccess().getRightSquareBracketKeyword_1_2_3());
    }
)))
;





// Entry rule entryRuleParticipantOccurrence
entryRuleParticipantOccurrence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParticipantOccurrenceRule()); }
	 iv_ruleParticipantOccurrence=ruleParticipantOccurrence 
	 { $current=$iv_ruleParticipantOccurrence.current; } 
	 EOF 
;

// Rule ParticipantOccurrence
ruleParticipantOccurrence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantOccurrenceAccess().getParticipantSourceParticipantIdParserRuleCall_0_0()); 
	    }
		lv_participantSource_0_0=ruleParticipantId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantOccurrenceRule());
	        }
       		set(
       			$current, 
       			"participantSource",
        		lv_participantSource_0_0, 
        		"ParticipantId");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParticipantOccurrenceAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		lv_cardinality_2_0=RULE_INTEGER
		{
			newLeafNode(lv_cardinality_2_0, grammarAccess.getParticipantOccurrenceAccess().getCardinalityINTEGERTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParticipantOccurrenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"cardinality",
        		lv_cardinality_2_0, 
        		"INTEGER");
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParticipantOccurrenceAccess().getRightSquareBracketKeyword_1_2());
    }
)?)
;





// Entry rule entryRuleStates
entryRuleStates returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatesRule()); }
	 iv_ruleStates=ruleStates 
	 { $current=$iv_ruleStates.current; } 
	 EOF 
;

// Rule States
ruleStates returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStatesAccess().getNameTK_STATESParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleTK_STATES		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatesRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"TK_STATES");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatesAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatesAccess().getStatesStateParserRuleCall_2_0()); 
	    }
		lv_states_2_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatesRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_2_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getIdStateIdParserRuleCall_0_0()); 
	    }
		lv_id_0_0=ruleStateId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"StateId");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getTypeStateTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleStateType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"StateType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStateAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleStateId
entryRuleStateId returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateIdRule()); }
	 iv_ruleStateId=ruleStateId 
	 { $current=$iv_ruleStateId.current; } 
	 EOF 
;

// Rule StateId
ruleStateId returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateIdAccess().getNameIDParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateIdRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleStateType
entryRuleStateType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateTypeRule()); }
	 iv_ruleStateType=ruleStateType 
	 { $current=$iv_ruleStateType.current; } 
	 EOF 
;

// Rule StateType
ruleStateType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStateTypeAccess().getStateTypeAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getStateTypeAccess().getInitialTK_INITIALParserRuleCall_1_0_0()); 
	    }
		lv_initial_1_0=ruleTK_INITIAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateTypeRule());
	        }
       		set(
       			$current, 
       			"initial",
        		lv_initial_1_0, 
        		"TK_INITIAL");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStateTypeAccess().getFinalTK_FINALParserRuleCall_1_1_0()); 
	    }
		lv_final_2_0=ruleTK_FINAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateTypeRule());
	        }
       		set(
       			$current, 
       			"final",
        		lv_final_2_0, 
        		"TK_FINAL");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleParticipants
entryRuleParticipants returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParticipantsRule()); }
	 iv_ruleParticipants=ruleParticipants 
	 { $current=$iv_ruleParticipants.current; } 
	 EOF 
;

// Rule Participants
ruleParticipants returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantsAccess().getNameTK_PARTICIPANTSParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleTK_PARTICIPANTS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantsRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"TK_PARTICIPANTS");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParticipantsAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantsAccess().getParticipantsParticipantParserRuleCall_2_0()); 
	    }
		lv_participants_2_0=ruleParticipant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantsRule());
	        }
       		add(
       			$current, 
       			"participants",
        		lv_participants_2_0, 
        		"Participant");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleParticipant
entryRuleParticipant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParticipantRule()); }
	 iv_ruleParticipant=ruleParticipant 
	 { $current=$iv_ruleParticipant.current; } 
	 EOF 
;

// Rule Participant
ruleParticipant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantAccess().getNameParticipantIdParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleParticipantId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ParticipantId");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantAccess().getParticipantDescriptionParticipantDescriptionParserRuleCall_1_0()); 
	    }
		lv_participantDescription_1_0=ruleParticipantDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantRule());
	        }
       		set(
       			$current, 
       			"participantDescription",
        		lv_participantDescription_1_0, 
        		"ParticipantDescription");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParticipantAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleParticipantId
entryRuleParticipantId returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParticipantIdRule()); }
	 iv_ruleParticipantId=ruleParticipantId 
	 { $current=$iv_ruleParticipantId.current; } 
	 EOF 
;

// Rule ParticipantId
ruleParticipantId returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantIdAccess().getNameIDParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantIdRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleParticipantDescription
entryRuleParticipantDescription returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParticipantDescriptionRule()); }
	 iv_ruleParticipantDescription=ruleParticipantDescription 
	 { $current=$iv_ruleParticipantDescription.current; } 
	 EOF 
;

// Rule ParticipantDescription
ruleParticipantDescription returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantDescriptionAccess().getKindTK_AGENTParserRuleCall_0_0_0_0()); 
	    }
		lv_kind_0_0=ruleTK_AGENT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantDescriptionRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_0_0, 
        		"TK_AGENT");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantDescriptionAccess().getRoleRoleParserRuleCall_0_0_1_0()); 
	    }
		lv_role_1_0=ruleRole		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantDescriptionRule());
	        }
       		set(
       			$current, 
       			"role",
        		lv_role_1_0, 
        		"Role");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantDescriptionAccess().getKindTK_ARTIFACTParserRuleCall_0_1_0_0()); 
	    }
		lv_kind_2_0=ruleTK_ARTIFACT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantDescriptionRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_2_0, 
        		"TK_ARTIFACT");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantDescriptionAccess().getTypeTypeParserRuleCall_0_1_1_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantDescriptionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantDescriptionAccess().getCardParticipantCardinalityParserRuleCall_1_0()); 
	    }
		lv_card_4_0=ruleParticipantCardinality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantDescriptionRule());
	        }
       		set(
       			$current, 
       			"card",
        		lv_card_4_0, 
        		"ParticipantCardinality");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParticipantCardinality
entryRuleParticipantCardinality returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParticipantCardinalityRule()); }
	 iv_ruleParticipantCardinality=ruleParticipantCardinality 
	 { $current=$iv_ruleParticipantCardinality.current; } 
	 EOF 
;

// Rule ParticipantCardinality
ruleParticipantCardinality returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParticipantCardinalityAccess().getParticipantCardinalityAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantCardinalityAccess().getCardAllParticipantCardinalityAllParserRuleCall_0_1_0()); 
	    }
		lv_cardAll_1_0=ruleParticipantCardinalityAll		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantCardinalityRule());
	        }
       		set(
       			$current, 
       			"cardAll",
        		lv_cardAll_1_0, 
        		"ParticipantCardinalityAll");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantCardinalityAccess().getCardMinMaxParticipantCardinalityMinMaxParserRuleCall_1_0()); 
	    }
		lv_cardMinMax_2_0=ruleParticipantCardinalityMinMax		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantCardinalityRule());
	        }
       		set(
       			$current, 
       			"cardMinMax",
        		lv_cardMinMax_2_0, 
        		"ParticipantCardinalityMinMax");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParticipantCardinalityMinMax
entryRuleParticipantCardinalityMinMax returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParticipantCardinalityMinMaxRule()); }
	 iv_ruleParticipantCardinalityMinMax=ruleParticipantCardinalityMinMax 
	 { $current=$iv_ruleParticipantCardinalityMinMax.current; } 
	 EOF 
;

// Rule ParticipantCardinalityMinMax
ruleParticipantCardinalityMinMax returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParticipantCardinalityMinMaxAccess().getParticipantCardinalityMinMaxAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantCardinalityMinMaxAccess().getMinParticipantCardinalityMinParserRuleCall_1_0()); 
	    }
		lv_min_1_0=ruleParticipantCardinalityMin		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantCardinalityMinMaxRule());
	        }
       		set(
       			$current, 
       			"min",
        		lv_min_1_0, 
        		"ParticipantCardinalityMin");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantCardinalityMinMaxAccess().getMaxParticipantCardinalityMaxParserRuleCall_2_0()); 
	    }
		lv_max_2_0=ruleParticipantCardinalityMax		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantCardinalityMinMaxRule());
	        }
       		set(
       			$current, 
       			"max",
        		lv_max_2_0, 
        		"ParticipantCardinalityMax");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleParticipantCardinalityMin
entryRuleParticipantCardinalityMin returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParticipantCardinalityMinRule()); }
	 iv_ruleParticipantCardinalityMin=ruleParticipantCardinalityMin 
	 { $current=$iv_ruleParticipantCardinalityMin.current; } 
	 EOF 
;

// Rule ParticipantCardinalityMin
ruleParticipantCardinalityMin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantCardinalityMinAccess().getNameTK_MINParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleTK_MIN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantCardinalityMinRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"TK_MIN");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_min_1_0=RULE_INTEGER
		{
			newLeafNode(lv_min_1_0, grammarAccess.getParticipantCardinalityMinAccess().getMinINTEGERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParticipantCardinalityMinRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"min",
        		lv_min_1_0, 
        		"INTEGER");
	    }

)
))
;





// Entry rule entryRuleParticipantCardinalityMax
entryRuleParticipantCardinalityMax returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParticipantCardinalityMaxRule()); }
	 iv_ruleParticipantCardinalityMax=ruleParticipantCardinalityMax 
	 { $current=$iv_ruleParticipantCardinalityMax.current; } 
	 EOF 
;

// Rule ParticipantCardinalityMax
ruleParticipantCardinalityMax returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantCardinalityMaxAccess().getNameTK_MAXParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleTK_MAX		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantCardinalityMaxRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"TK_MAX");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_max_1_0=RULE_INTEGER
		{
			newLeafNode(lv_max_1_0, grammarAccess.getParticipantCardinalityMaxAccess().getMaxINTEGERTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParticipantCardinalityMaxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"max",
        		lv_max_1_0, 
        		"INTEGER");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantCardinalityMaxAccess().getMax2TK_PLUSParserRuleCall_1_1_0()); 
	    }
		lv_max2_2_0=ruleTK_PLUS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantCardinalityMaxRule());
	        }
       		set(
       			$current, 
       			"max2",
        		lv_max2_2_0, 
        		"TK_PLUS");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleParticipantCardinalityAll
entryRuleParticipantCardinalityAll returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParticipantCardinalityAllRule()); }
	 iv_ruleParticipantCardinalityAll=ruleParticipantCardinalityAll 
	 { $current=$iv_ruleParticipantCardinalityAll.current; } 
	 EOF 
;

// Rule ParticipantCardinalityAll
ruleParticipantCardinalityAll returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getParticipantCardinalityAllAccess().getNameTK_ALLParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleTK_ALL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParticipantCardinalityAllRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"TK_ALL");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_type_0_0=RULE_STRING
		{
			newLeafNode(lv_type_0_0, grammarAccess.getTypeAccess().getTypeSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleRole
entryRuleRole returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRoleRule()); }
	 iv_ruleRole=ruleRole 
	 { $current=$iv_ruleRole.current; } 
	 EOF 
;

// Rule Role
ruleRole returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_role_0_0=RULE_STRING
		{
			newLeafNode(lv_role_0_0, grammarAccess.getRoleAccess().getRoleSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRoleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"role",
        		lv_role_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleDescription
entryRuleDescription returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDescriptionRule()); }
	 iv_ruleDescription=ruleDescription 
	 { $current=$iv_ruleDescription.current; } 
	 EOF 
;

// Rule Description
ruleDescription returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDescriptionAccess().getDescriptionAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getDescriptionAccess().getNameTK_DESCRIPTIONParserRuleCall_1_0_0()); 
	    }
		lv_name_1_0=ruleTK_DESCRIPTION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDescriptionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"TK_DESCRIPTION");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDescriptionAccess().getColonKeyword_1_1());
    }
(
(
		lv_description_3_0=RULE_STRING
		{
			newLeafNode(lv_description_3_0, grammarAccess.getDescriptionAccess().getDescriptionSTRINGTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_3_0, 
        		"STRING");
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDescriptionAccess().getSemicolonKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleGoals
entryRuleGoals returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGoalsRule()); }
	 iv_ruleGoals=ruleGoals 
	 { $current=$iv_ruleGoals.current; } 
	 EOF 
;

// Rule Goals
ruleGoals returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGoalsAccess().getNameTK_GOALSParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleTK_GOALS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGoalsRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"TK_GOALS");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGoalsAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGoalsAccess().getGoalsGoalParserRuleCall_2_0()); 
	    }
		lv_goals_2_0=ruleGoal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGoalsRule());
	        }
       		add(
       			$current, 
       			"goals",
        		lv_goals_2_0, 
        		"Goal");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleGoal
entryRuleGoal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGoalRule()); }
	 iv_ruleGoal=ruleGoal 
	 { $current=$iv_ruleGoal.current; } 
	 EOF 
;

// Rule Goal
ruleGoal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_goal_0_0=RULE_STRING
		{
			newLeafNode(lv_goal_0_0, grammarAccess.getGoalAccess().getGoalSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGoalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"goal",
        		lv_goal_0_0, 
        		"STRING");
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGoalAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleTK_PROTOCOL
entryRuleTK_PROTOCOL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_PROTOCOLRule()); } 
	 iv_ruleTK_PROTOCOL=ruleTK_PROTOCOL 
	 { $current=$iv_ruleTK_PROTOCOL.current.getText(); }  
	 EOF 
;

// Rule TK_PROTOCOL
ruleTK_PROTOCOL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='protocol' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_PROTOCOLAccess().getProtocolKeyword()); 
    }

    ;





// Entry rule entryRuleTK_DESCRIPTION
entryRuleTK_DESCRIPTION returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_DESCRIPTIONRule()); } 
	 iv_ruleTK_DESCRIPTION=ruleTK_DESCRIPTION 
	 { $current=$iv_ruleTK_DESCRIPTION.current.getText(); }  
	 EOF 
;

// Rule TK_DESCRIPTION
ruleTK_DESCRIPTION returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='description' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_DESCRIPTIONAccess().getDescriptionKeyword()); 
    }

    ;





// Entry rule entryRuleTK_GOALS
entryRuleTK_GOALS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_GOALSRule()); } 
	 iv_ruleTK_GOALS=ruleTK_GOALS 
	 { $current=$iv_ruleTK_GOALS.current.getText(); }  
	 EOF 
;

// Rule TK_GOALS
ruleTK_GOALS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='goals' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_GOALSAccess().getGoalsKeyword()); 
    }

    ;





// Entry rule entryRuleTK_PARTICIPANTS
entryRuleTK_PARTICIPANTS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_PARTICIPANTSRule()); } 
	 iv_ruleTK_PARTICIPANTS=ruleTK_PARTICIPANTS 
	 { $current=$iv_ruleTK_PARTICIPANTS.current.getText(); }  
	 EOF 
;

// Rule TK_PARTICIPANTS
ruleTK_PARTICIPANTS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='participants' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_PARTICIPANTSAccess().getParticipantsKeyword()); 
    }

    ;





// Entry rule entryRuleTK_AGENT
entryRuleTK_AGENT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_AGENTRule()); } 
	 iv_ruleTK_AGENT=ruleTK_AGENT 
	 { $current=$iv_ruleTK_AGENT.current.getText(); }  
	 EOF 
;

// Rule TK_AGENT
ruleTK_AGENT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='agent' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_AGENTAccess().getAgentKeyword()); 
    }

    ;





// Entry rule entryRuleTK_ARTIFACT
entryRuleTK_ARTIFACT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_ARTIFACTRule()); } 
	 iv_ruleTK_ARTIFACT=ruleTK_ARTIFACT 
	 { $current=$iv_ruleTK_ARTIFACT.current.getText(); }  
	 EOF 
;

// Rule TK_ARTIFACT
ruleTK_ARTIFACT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='artifact' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_ARTIFACTAccess().getArtifactKeyword()); 
    }

    ;





// Entry rule entryRuleTK_MAX
entryRuleTK_MAX returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_MAXRule()); } 
	 iv_ruleTK_MAX=ruleTK_MAX 
	 { $current=$iv_ruleTK_MAX.current.getText(); }  
	 EOF 
;

// Rule TK_MAX
ruleTK_MAX returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='max' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_MAXAccess().getMaxKeyword()); 
    }

    ;





// Entry rule entryRuleTK_MIN
entryRuleTK_MIN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_MINRule()); } 
	 iv_ruleTK_MIN=ruleTK_MIN 
	 { $current=$iv_ruleTK_MIN.current.getText(); }  
	 EOF 
;

// Rule TK_MIN
ruleTK_MIN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='min' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_MINAccess().getMinKeyword()); 
    }

    ;





// Entry rule entryRuleTK_STATES
entryRuleTK_STATES returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_STATESRule()); } 
	 iv_ruleTK_STATES=ruleTK_STATES 
	 { $current=$iv_ruleTK_STATES.current.getText(); }  
	 EOF 
;

// Rule TK_STATES
ruleTK_STATES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='states' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_STATESAccess().getStatesKeyword()); 
    }

    ;





// Entry rule entryRuleTK_INITIAL
entryRuleTK_INITIAL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_INITIALRule()); } 
	 iv_ruleTK_INITIAL=ruleTK_INITIAL 
	 { $current=$iv_ruleTK_INITIAL.current.getText(); }  
	 EOF 
;

// Rule TK_INITIAL
ruleTK_INITIAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='initial' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_INITIALAccess().getInitialKeyword()); 
    }

    ;





// Entry rule entryRuleTK_FINAL
entryRuleTK_FINAL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_FINALRule()); } 
	 iv_ruleTK_FINAL=ruleTK_FINAL 
	 { $current=$iv_ruleTK_FINAL.current.getText(); }  
	 EOF 
;

// Rule TK_FINAL
ruleTK_FINAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='final' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_FINALAccess().getFinalKeyword()); 
    }

    ;





// Entry rule entryRuleTK_TRANSITIONS
entryRuleTK_TRANSITIONS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_TRANSITIONSRule()); } 
	 iv_ruleTK_TRANSITIONS=ruleTK_TRANSITIONS 
	 { $current=$iv_ruleTK_TRANSITIONS.current.getText(); }  
	 EOF 
;

// Rule TK_TRANSITIONS
ruleTK_TRANSITIONS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='transitions' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_TRANSITIONSAccess().getTransitionsKeyword()); 
    }

    ;





// Entry rule entryRuleTK_TIMEOUT
entryRuleTK_TIMEOUT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_TIMEOUTRule()); } 
	 iv_ruleTK_TIMEOUT=ruleTK_TIMEOUT 
	 { $current=$iv_ruleTK_TIMEOUT.current.getText(); }  
	 EOF 
;

// Rule TK_TIMEOUT
ruleTK_TIMEOUT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='timeout' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_TIMEOUTAccess().getTimeoutKeyword()); 
    }

    ;





// Entry rule entryRuleTK_MESSAGE
entryRuleTK_MESSAGE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_MESSAGERule()); } 
	 iv_ruleTK_MESSAGE=ruleTK_MESSAGE 
	 { $current=$iv_ruleTK_MESSAGE.current.getText(); }  
	 EOF 
;

// Rule TK_MESSAGE
ruleTK_MESSAGE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='message' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_MESSAGEAccess().getMessageKeyword()); 
    }

    ;





// Entry rule entryRuleTK_ACTION
entryRuleTK_ACTION returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_ACTIONRule()); } 
	 iv_ruleTK_ACTION=ruleTK_ACTION 
	 { $current=$iv_ruleTK_ACTION.current.getText(); }  
	 EOF 
;

// Rule TK_ACTION
ruleTK_ACTION returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='action' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_ACTIONAccess().getActionKeyword()); 
    }

    ;





// Entry rule entryRuleTK_EVENT
entryRuleTK_EVENT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_EVENTRule()); } 
	 iv_ruleTK_EVENT=ruleTK_EVENT 
	 { $current=$iv_ruleTK_EVENT.current.getText(); }  
	 EOF 
;

// Rule TK_EVENT
ruleTK_EVENT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='event' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_EVENTAccess().getEventKeyword()); 
    }

    ;





// Entry rule entryRuleTK_TRIGGER
entryRuleTK_TRIGGER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_TRIGGERRule()); } 
	 iv_ruleTK_TRIGGER=ruleTK_TRIGGER 
	 { $current=$iv_ruleTK_TRIGGER.current.getText(); }  
	 EOF 
;

// Rule TK_TRIGGER
ruleTK_TRIGGER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='trigger' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_TRIGGERAccess().getTriggerKeyword()); 
    }

    ;





// Entry rule entryRuleTK_IMPORT
entryRuleTK_IMPORT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_IMPORTRule()); } 
	 iv_ruleTK_IMPORT=ruleTK_IMPORT 
	 { $current=$iv_ruleTK_IMPORT.current.getText(); }  
	 EOF 
;

// Rule TK_IMPORT
ruleTK_IMPORT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='import' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_IMPORTAccess().getImportKeyword()); 
    }

    ;





// Entry rule entryRuleTK_MAPPING
entryRuleTK_MAPPING returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_MAPPINGRule()); } 
	 iv_ruleTK_MAPPING=ruleTK_MAPPING 
	 { $current=$iv_ruleTK_MAPPING.current.getText(); }  
	 EOF 
;

// Rule TK_MAPPING
ruleTK_MAPPING returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='mapping' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_MAPPINGAccess().getMappingKeyword()); 
    }

    ;





// Entry rule entryRuleTK_ALL
entryRuleTK_ALL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_ALLRule()); } 
	 iv_ruleTK_ALL=ruleTK_ALL 
	 { $current=$iv_ruleTK_ALL.current.getText(); }  
	 EOF 
;

// Rule TK_ALL
ruleTK_ALL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='all' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_ALLAccess().getAllKeyword()); 
    }

    ;





// Entry rule entryRuleTK_PLUS
entryRuleTK_PLUS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_PLUSRule()); } 
	 iv_ruleTK_PLUS=ruleTK_PLUS 
	 { $current=$iv_ruleTK_PLUS.current.getText(); }  
	 EOF 
;

// Rule TK_PLUS
ruleTK_PLUS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_PLUSAccess().getPlusSignKeyword()); 
    }

    ;





// Entry rule entryRuleID
entryRuleID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIDRule()); } 
	 iv_ruleID=ruleID 
	 { $current=$iv_ruleID.current.getText(); }  
	 EOF 
;

// Rule ID
ruleID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_WITH_STARTING_LCLETTER_0=RULE_ID_WITH_STARTING_LCLETTER    {
		$current.merge(this_ID_WITH_STARTING_LCLETTER_0);
    }

    { 
    newLeafNode(this_ID_WITH_STARTING_LCLETTER_0, grammarAccess.getIDAccess().getID_WITH_STARTING_LCLETTERTerminalRuleCall()); 
    }

    ;





RULE_ID_WITH_STARTING_LCLETTER : '^'? ('a'..'z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_INTEGER : RULE_INTEGER_NUMBER;

fragment RULE_INTEGER_NUMBER : ('0'|'1'..'9' ('0'..'9')*);

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;


